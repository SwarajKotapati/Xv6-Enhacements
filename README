# Section 4: Trap and Emulate Virtualization

## Objective
The final section explores trap and emulate virtualization, offering a unique approach to designing a virtual machine (VM) within the xv6 framework. The VM runs as a user-mode process, while privileged instructions trap to a virtual machine monitor (VMM). Tasks include initializing and maintaining the VM’s privileged state, redirecting traps, decoding and emulating trapped privileged instructions, and emulating physical memory protection (PMP). This assignment extends the capabilities of xv6 into the realm of virtualization.

## Task Breakdowns

### Privileged Virtual Machine State Initialization
- To facilitate privileged state tracking, an initialization process creates and maintains a data structure.
- This structure includes registers like machine trap handling, setup trap, information state, physical memory protection, satp, and execution mode.
- All registers are initialized, with special attention to the `mvendorid` register, which is set to the hexadecimal code ”cse536.”
- Additionally, different VM execution modes are defined here.

### Track Virtual Machine Execution and Redirect Traps
- VM processes are identified by their names starting with ”vm-.”
- The VMM tracks these processes and redirects user traps raised for privileged instructions to the `trap_and_emulate()` function, as defined in trap-and-emulate.c.
- Notably, this redirection includes handling traps for the `ecall` instruction.

### Decode Trapped Privileged Instruction
- Upon trapping privileged instructions, the VMM decodes them to enable subsequent emulation.
- The decoding process involves extracting the opcode of the instruction (`op`), identifying source registers (`src1` and `src2`), and determining the destination register (`dst`).
- A crucial part of this decoding is the mapping between register codes and the actual source and destination registers.

### Emulate Decoded Instructions
- Following the decoding of privileged instructions (`csrr`, `csrw`, `sret`, `mret`, `ecall`), the VMM proceeds to emulate their operation in software.
- Specific descriptions for each instruction are provided:
  - `csrr`: Moves the value from a privileged register to an unprivileged register.
  - `csrw`: Moves the value from an unprivileged register to a privileged register.
  - `sret`: Transfers control from S-mode to U-mode entry point.
  - `mret`: Transfers control from M-mode to S-mode entry point.
  - `ecall`: Transfers control from U-mode to S-mode or M-mode, also transferring control from S-mode to M-mode.
- Additionally, the VM is shut down if `0x0` is written to `mvendorid`.

### Emulating Physical Memory Protection (PMP)
- To emulate PMP without paging, the VMM performs three sub-tasks.
  - Firstly, it creates a copy of the VM process’ page tables for U/S-mode execution.
  - Secondly, on the newly-created page tables (referred to as PMP tables), the VMM unmaps regions of memory that are inaccessible based on PMP registers.
  - Thirdly, when the VM transitions into U/S-mode (e.g., using `sret`), the VMM switches the VM process’ page tables to the PMP tables.
- The assumption is made that a 4MB memory region from `0x80000000` to `0x80400000` is available for PMP.



xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
