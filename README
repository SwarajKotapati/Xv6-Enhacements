# Section 2: Memory Management Enhancement

## Objective
The second section introduces on-demand paging and copy-on-write mechanisms to xv6, enhancing memory management capabilities. Key tasks include enabling on-demand binary loading, designing a page fault handler, extending on-demand loading to heap memory, implementing page swapping to disk for heap memory, and introducing the Working Set Algorithm (WSA). These enhancements optimize memory usage and facilitate efficient page management.

## Task Breakdowns

### Enable On-Demand Binary Loading
- Revamped process creation in xv6 by introducing on-demand loading of a program binary’s contents.
- Identified on-demand processes, skipped program section loading, and updated print statements.
- Tested by running `make qemu` and comparing outputs.

### Design a Page Fault Handler
- Implemented a page fault handler to load program binary contents on-demand.
- Redirected page fault exceptions, found faulting page address, loaded program binary page from disk, and updated print statements.
- Tested by running `echo Hello World` on the shell.

### Enable On-Demand Heap Memory
- Extended on-demand loading to heap memory.
- Prevented heap page allocation, tracked heap pages, handled heap page faults, and updated print statements.

### Implement Page Swapping to Disk for Heap
- Implemented page swapping for heap memory using FIFO algorithm.
- Tracked heap page load time, total resident heap pages, evicted victim page to free disk region, and retrieved swapped page from disk.

### Implement the Working Set Algorithm
- Replaced the FIFO page swap algorithm with the Working Set Algorithm (WSA).
- Tested the algorithm robustly and uploaded test cases.

### Implement Copy-On-Write (CoW) during Fork
- Enhanced `fork()` with copy-on-write (CoW) optimization.
- Implemented `uvmcopy_cow()`, called it in `fork()`, tracked shared pages in a CoW group, and enabled CoW in the page fault handler.




xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
